<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd"><module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <property name="fileExtensions" value="java"/>

    <!-- 规则8.9.2 不要依赖平台默认的字符编码方式，使用UTF-8 -->
    <module name="com.huawei.codecheck.customchecks.programming.FileEncodingCheck">
        <!--<message key="file.encoding" value="不要依赖平台默认的字符编码方式，使用UTF-8"/>-->
        <message key="file.encoding" value="Use UTF-8 to replace the default character encoding on a platform."/>
    </module>

    <module name="TreeWalker">

        <!-- 规则1.2 所有标识符仅使用ASCII字母和数字，名称由正则表达式匹配 \w{2,64} -->
        <module name="com.huawei.codecheck.customchecks.naming.IdentName">
            <!--<message key="IdentName" value="所有标识符仅使用ASCII字母和数字，字符长度在2-64之内"/>-->
            <!--<message key="IdentName_S" value="如果用了s和m作为变量前缀，则必须用s表示静态字段，m表示非公共且非静态字段"/>-->
            <message key="IdentName" value="All identifiers use only ASCII letters and numbers, and the character length is within 2-64"/>
            <message key="IdentName_S" value="If use s or m as variable prefixes, you must use s for static fields, and m for non-public and non-static fields"/>
        </module>

        <!-- 规则1.5 方法名称采用首字母小写的驼峰命名法 -->
        <module name="com.huawei.codecheck.customchecks.naming.MethodName">
            <!--<message key="method.name" value="方法名称采用首字母小写的驼峰命名法"/>-->
            <message key="method.name" value="Name a method in lowerCamelCase style."/>
        </module>

        <!-- 规则1.6 常量名称全大写单词以下划线分隔 -->
        <module name="com.huawei.codecheck.customchecks.naming.ConstantNamingRule">
            <!--<message key="MSG_KEY" value="常量名称全大写单词以下划线分隔"/>-->
            <message key="MSG_KEY" value="Capitalize a constant name, with each word separated by an underscore (_)."/>
        </module>

        <!-- 建议1.1 避免使用否定的布尔变量名 -->
        

        <!-- 规则2.1 Javadoc用于每一个public或protected修饰的元素 -->
        <module name="com.huawei.codecheck.customchecks.comments.JavadocScope">
            <!--<message key="MSG_KEY" value="Javadoc用于每一个public或protected修饰的元素"/>-->
            <message key="MSG_KEY" value="Javadoc should be present for every public or protected element."/>
        </module>

        <!--  规则2.2 对于方法有参数、返回值、异常等信息时，必须在Javadoc块中描述：功能、@param、@return、@throws等-->
        

        <!-- 规则2.3 Javadoc标签与内容间只1个空格,按@param，@return，@throws顺序排列 -->
        <module name="com.huawei.codecheck.customchecks.comments.JavaDocFormat">
            <!--<message key="JavaDocFormatCheck" value="Javadoc标签与内容间只1个空格"/>-->
            <!--<message key="JavaDocParamOrder" value="Javadoc标签按@param，@return，@throws顺序排列"/>-->

            <message key="JavadocBeginsWithSummary" value="The Javadoc should start with a concise summary explaining the principles, intents (pre and post conditions) of the API, etc."/>
            <message key="JavaDocFormatCheck" value="There should be only one space between Javadoc tags and the content."/>
            <message key="JavaDocParamOrder" value="The tags should appear in the sequence of @param,@return, and @throws."/>
        </module>

        <!--规则2.4 顶层public类头有功能说明、@since,作者可选（含名字、邮箱和工号），用javadoc格式-->
        <module name="com.huawei.codecheck.customchecks.comments.TopClassComment">
            <message key="topClassCommentMust" value="File header comments must contain the copyright notice"/>
            <message key="topClassCommentRedundant" value="History description is not recommended."/>
            <message key="topClassCommentEmptyNotes" value="Empty Notes, please delete it or fill it."/>
            <message key="topClassCommentWrongOrder" value="Top Level class should be first."/>
            <message key="topClassCommentFunction" value="A top-level public class header should contain the function description."/>
            <message key="topClassCommentSince" value="A top-level public class header should contain the @since."/>
        </module>

        <!-- 规则2.5 方法命名无法表达的信息，必须加注释辅助说明; 禁止空有格式的方法头 -->
        <module name="com.huawei.codecheck.customchecks.comments.MethodHead">
            <!--<message key="MethodHeadComment" value="方法命名无法表达的信息，必须加注释辅助说明; 禁止空有格式的方法头"/>-->
            <message key="MethodHeadComment" value=" Method header comments with no content are not allowed."/>
        </module>

        <!-- 规则2.6 注释符与注释内容间要有1空格；右置注释与前面代码至少1空格 -->
        <module name="com.huawei.codecheck.customchecks.comments.CommentSpace">
            <!--<message key="commentSpace1" value="注释正文与其下的各个Javadoc tag之间加1个空行"/>-->
            <!--<message key="commentSpace2" value="类级成员注释与上面的代码之间有一个空行"/>-->
            <!--<message key="commentSpace3" value="注释符与注释内容间要有1空格"/>-->
            <!--<message key="commentSpace4" value="右置注释与前面代码至少1空格"/>-->
            <!--<message key="commentSpace5" value="单行JAVADOC不能有javaTag标签"/>-->
            <message key="commentSpace1" value="There must be a space between the comment character and the comment content."/>
            <message key="commentSpace2" value="There must be a blank line between the class-level member comment and the above code"/>
            <message key="commentSpace3" value="There must be a space between the comment character and the comment content"/>
            <message key="commentSpace4" value="At least one space is required between the comment and code if the comment is placed to the right of code."/>
            <message key="commentSpace5" value="Single-line JAVADOC cannot contain javadoc tags"/>
        </module>

        <!-- 建议2.1 正式交付给客户的代码不能包含TODO/FIXME 注释 -->
        

        <!-- 规则2.7 不用的代码段直接删除，不要注释掉 -->
        

        <!--规则3.1 避免文件过长，不超过2000行（非空非注释行）-->
        <module name="com.huawei.codecheck.customchecks.formatting.FileLength">
            <property name="fileMaximum" value="2000"/>
            <!--<message key="filelength.file" value="避免文件过长，不超过2000行（非空非注释行）"/>-->
            <message key="filelength.file" value="Avoid long files and ensure that each file contains no more than 2000 lines (excluding blank lines and comments)."/>
        </module>

	    <!-- 规则3.2 一个源文件按顺序包含版权、package、import、顶层类，且用空行分隔 && 规则2.2 文件头注释必须包含版权许可 -->
        

         <!--建议3.1 import包应当按照Java最基础的包、Java的其它包、Java的扩展包、org、公司的顺序出现，并用一个空行分组 -->
         

        <!-- 建议3.2 一个类或接口的声明部分应当按照类变量、实例变量、构造器、方法的顺序出现，且用空行分隔 -->
        

        <!-- 规则3.3 在条件语句和循环块中必须使用大括号 -->
        <module name="com.huawei.codecheck.customchecks.formatting.NeedBraces">
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
            <message key="needBracesMsg" value="Conditional statements and loop blocks must use braces."/>
        </module>

        <!-- 规则3.5 使用空格进行缩进，每次缩进4个空格 -->
        <module name="com.huawei.codecheck.customchecks.formatting.HWIndentation">
            <!--<message key="indentation.error" value="使用空格进行缩进，每次缩进4个空格"/>-->
            <message key="indentation.error" value="Use spaces to indent, and indent four spaces at a time."/>
        </module>

        <!--规则3.6 新行起点在点号、双冒号、类型、catch块中管道之前，在方法左括号、逗号、lambda箭头和其左大括号之后-->
        <module name="com.huawei.codecheck.customchecks.formatting.OperatorWrap">
            <property name="tokens" value="GT"/>
            <property name="option" value="eol"/>
            <!--<message key="line.new" value="新行起点在点号、双冒号、类型、catch块中管道之前，在方法左括号、逗号、lambda箭头和其左大括号之后"/>-->
            <message key="line.new" value="Wrap the line before the dot, double colon, type&amp;, and pipecharacter in a catch block, and after the opening brace of a method,comma, lambda arrow, or lambda opening brace."/>
            <message key="line.previous" value=" ''{0}'' should be on the previous line."/>
        </module>
        <module name="com.huawei.codecheck.customchecks.formatting.OperatorWrap">
            <property name="tokens" value="METHOD_REF,TYPE_EXTENSION_AND,BOR"/>
            <property name="option" value="nl"/>
            <!--<message key="line.new" value="新行起点在点号、双冒号、类型、catch块中管道之前，在方法左括号、逗号、lambda箭头和其左大括号之后"/>-->
            <message key="line.new" value="Wrap the line before the dot, double colon, type&amp;, and pipecharacter in a catch block, and after the opening brace of a method,comma, lambda arrow, or lambda opening brace."/>
            <message key="line.previous" value=" ''{0}'' should be on the previous line."/>
        </module>
        <module name="com.huawei.codecheck.customchecks.formatting.SeparatorWrap">
            <property name="tokens" value="COMMA,"/>
            <property name="option" value="eol"/>
            <!--<message key="line.new" value="新行起点在点号、双冒号、类型、catch块中管道之前，在方法左括号、逗号、lambda箭头和其左大括号之后"/>-->
            <message key="line.new" value="Wrap the line before the dot, double colon, type&amp;, and pipecharacter in a catch block, and after the opening brace of a method,comma, lambda arrow, or lambda opening brace."/>
            <message key="line.previous" value=" ''{0}'' should be on the previous line."/>
        </module>
        <module name="com.huawei.codecheck.customchecks.formatting.SeparatorWrap">
            <property name="tokens" value="METHOD_REF,DOT"/>
            <property name="option" value="nl"/>
            <!--<message key="line.new" value="新行起点在点号、双冒号、类型、catch块中管道之前，在方法左括号、逗号、lambda箭头和其左大括号之后"/>-->
            <message key="line.new" value="Wrap the line before the dot, double colon, type&amp;, and pipecharacter in a catch block, and after the opening brace of a method,comma, lambda arrow, or lambda opening brace."/>
            <message key="line.previous" value=" ''{0}'' should be on the previous line."/>
        </module>

        <!-- 建议3.6 减少不必要的空行，保持代码紧凑 -->
        <module name="com.huawei.codecheck.customchecks.formatting.HWEmptyLineSeperator">
            <property name="forbidEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <!--<message key="empty.line.separator" value="空行应该出现在字段，构造方法，方法，嵌套类，静态初始化块之间"/>-->
            <!--<message key="empty.line.separator.multiple.lines.inside" value="方法内部、类型定义内部、初始化表达式内部，不使用连续空行"/>-->
            <!--<message key="empty.line.separator.multiple.lines" value="不使用连续 3 个空行，或更多"/>-->
            <!--<message key="emptyLineRedundant" value="大括号内的代码块行首之前和行尾之后不要加空行，包括类型和方法定义、语句代码块"/>-->
            <message key="empty.line.separator" value="Properly arrange blank lines based on the content. Blank lines are present between fields, constructors,methods, nested classes, and static initializers."/>
            <message key="empty.line.separator.multiple.lines.inside" value="Do not use consecutive blank lines in a method, type definition, and initialization expression."/>
            <message key="empty.line.separator.multiple.lines" value="Do not use consecutive three or more blank lines."/>
            <message key="emptyLineRedundant" value="Do not add blank lines before the start and after the end of the code block in a brace, including the type,method definition, and statement code blocks."/>
        </module>

        <!-- 建议3.7 单个空格应该分隔关键字与其后的左括号、与其前面的右大括号，
        出现在任何二元/三元运算符/类似运算符的两侧，,:;或结束括号)之后使用空格。行尾和空行不能有空格space -->
        

        <!-- 建议3.8 不应插入空格水平对齐 -->
        

         <!--建议3.9 枚举常量间逗号隔开，换行可选 -->
        

        <!-- 规则3.7 每行声明一个变量 -->
        <module name="com.huawei.codecheck.customchecks.formatting.MultipleVariableDeclarations">
            <message key="multiple.variable.declarations" value="Only one variable definition per line allowed."/>
            <message key="multiple.variable.declarations.comma" value="Each variable declaration must be in its own statement."/>
        </module>

        <!-- 规则3.8 禁止C风格的数组声明 -->
        <module name="com.huawei.codecheck.customchecks.formatting.HWArrayTypeStyle">
            <property name="javaStyle" value="true"/>
            <!--<message key="array.type.style" value="禁止C风格的数组声明"/>-->
            <message key="array.type.style" value="No C-style array declarations"/>
        </module>

        <!-- 建议3.10 变量被声明在接近它们首次使用的行 -->
        

        <!-- 建议3.12 类和成员修饰符（如果存在）按Java语言规范建议的顺序显示 -->
        

        <!-- 规则3.11 数字字面量以大写字母为后缀 -->
        <module name="com.huawei.codecheck.customchecks.formatting.UpperEllRule">
            <!--<message key="UpperEllRule" value="数字字面量以大写字母为后缀"/>-->
            <message key="UpperEllRule" value="A numeric literal uses an uppercase suffix."/>
        </module>

        <!-- 规则4.2 需要精确计算时不要使用float和double -->
        <module name="com.huawei.codecheck.customchecks.varandtypes.PreciseCompute">
            <!--<message key="PreciseCompute" value="需要精确计算时不要使用float和double"/>-->
            <message key="PreciseCompute" value="Do not use float or double when accurate calculation is required."/>
        </module>

        <!-- 规则4.3 浮点型数据判断相等不能直接使用== -->
        <module name="com.huawei.codecheck.customchecks.varandtypes.FloatEquals">
            <!--<message key="FloatCompareCheck" value="浮点型数据判断相等不能直接使用==/equals/compareTo"/>-->
            <message key="FloatCompareCheck" value="Do not directly use ==/equals/compareTo to determine the equivalence of floating point data."/>
        </module>

        <!-- 规则4.4 禁止尝试与NaN进行比较运算,相等操作使用Double或Float的isNaN方法 -->
        <module name="com.huawei.codecheck.customchecks.varandtypes.NoCompareNaN">
            <!--<message key="NoCompareNaN" value="禁止尝试与NaN进行比较运算,相等操作使用Double或Float的isNaN方法"/>-->
            <message key="NoCompareNaNCheck" value="It is prohibited to compare against NaN using relational or equality operators. Use the isNaN method of the Double and Float classes instead."/>
        </module>

        <!-- 规则4.5 不要在单个的表达式中对相同的变量赋值超过一次 -->
        <module name="com.huawei.codecheck.customchecks.varandtypes.SameVariableAssignment">
            <!--<message key="sameVariableAssignment" value="不要在单个的表达式中对相同的变量赋值超过一次" />-->
            <message key="sameVariableAssignment" value="Do not assign the same variables more than once in one expression."/>
        </module>

         <!-- 建议4.1 在向下类型转换前用instanceof进行判断  -->
        

        <!-- 规则5.1 避免方法过长，不超过50行（非空非注释） -->
        <module name="com.huawei.codecheck.customchecks.methods.FunctionLength">
            <property name="methodMaximum" value="50"/>
            <!--<message key="functionlength.method" value="避免方法过长，不超过50行（非空非注释）"/>-->
            <message key="functionlength.method" value="The length of method ''{0}'' is {1}. Avoid large methods, and keep them within 50 lines (excluding blank lines and comments)."/>
        </module>

        <!-- 建议5.1 不要把方法的入参当做工作变量/临时变量 -->
        

        <!-- 建议5.2 方法的参数个数不应超过5个 -->
        

        <!-- 建议5.3 谨慎使用可变数量参数的方法 -->
        

        <!-- 建议5.4 构造方法如果参数较多，尽量重用 -->
        

        <!-- 建议5.5 对于返回数组或者容器的方法，应返回长度为0的数组或者容器，代替返回null -->
        

        <!-- 建议6.1 应避免public且非final的成员字段定义 -->
        

        <!-- 建议6.3 接口定义中去掉多余的修饰词 -->
        

        <!-- 规则7.1 不要通过一个空的catch块忽略异常 -->
        <module name="com.huawei.codecheck.customchecks.programming.EmptyCatchBlock">
            <message key="MSG_KEY" value="Do not use an empty catch block to ignore exceptions."/>
        </module>

        <!-- 规则7.4 日志的记录，不要使用 System.out与 System.err 进行控制台打印，进行处理应使用Facade模式的日志框架（例如：产品自研的，或第三方Slf4j等） -->
        <module name="com.huawei.codecheck.customchecks.exceptionandlogs.SystemPrintln">
            <message key="SystemPrintln" value="Not use System.out or System.err, use a log framework in the Facade pattern, for example, Huawei developed log framework or Simple Logging Facade for Java (SLF4J) instead."/>
        </module>

        <!-- 规则7.5 日志工具Logger类的实例应声明为private static final -->
        <module name="com.huawei.codecheck.customchecks.exceptionandlogs.LoggerIsNotStaticFinal">
            <!--<message key="MSG_KEY" value="日志工具Logger类的实例应声明为private static final"/>-->
            <message key="MSG_KEY" value="Declare instances of the log tool Logger type as private static final or private final."/>
        </module>

        <!-- 规则7.6 日志应分等级，对info及以下，使用条件形式或者使用占位符的方式 -->
        <module name="com.huawei.codecheck.customchecks.exceptionandlogs.HWInfoLog">
            <!--<message key="MSG_KEY" value="日志应分等级，对info及以下，使用条件形式或者使用占位符的方式"/>-->
            <message key="MSG_KEY" value="Set logs to different levels and use conditions or placeholders for 'info' level logging and below."/>
            <property name="fixTypeConfig" value="condition"/>
        </module>

       <!-- 建议7.1 不要直接捕获受检异常的基类Exception -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#IllegalCatch -->
        

        <!-- 规则8.1.2 创建新线程时需指定线程名 -->
         <module name="com.huawei.codecheck.customchecks.programming.NewThreadShouldSetName">
             <!--<message key="MSG_KEY" value="创建新线程时需指定线程名"/>-->
             <message key="MSG_KEY" value="Specify the thread name when creating a thread."/>
         </module>

        <!-- 规则8.1.3 使用Thread对象的setUncaughtExceptionHandler方法注册未捕获异常处理者 -->
        <module name="com.huawei.codecheck.customchecks.programming.ThreadUncaughtException">
            <message key="threadSetUncaughtExhandlerCheck" value="Use the setUncaughtExceptionHandler method for thread objects to register handlers of uncaught exceptions.."/>
        </module>

        <!-- 规则8.1.4 不要依赖线程调度器、线程优先级和yield()方法 -->
        <module name="com.huawei.codecheck.customchecks.programming.ThreadAdjust">
            <message key="threadYieldCheck" value="Thread.yield() is not recommended, because it does not work well everywhere."/>
            <message key="threadSleep0Check" value="Do not use Thread.sleep(0), which can return immediately."/>
            <message key="threadSetPriorityCheck" value="thread instance.setPriority(int) is not recommended, because it does not work well everywhere."/>
        </module>

        <!-- 规则8.1.5 采用Java1.5提供新并发工具代替wait和notify -->
        <module name="com.huawei.codecheck.customchecks.programming.ThreadSafe">
            <message key="wrongMapCheck" value="Please use ConcurrentHashMap instead of Hashtable or Collections.synchronizeMap(hashMap), it's more efficient."/>
            <message key="threadSafeNotifyCheck" value="Please use notifyAll() instead of notify()."/>
        </module>

        <!-- 建议8.1.1 使用Thread.interrupt()或者线程同步机制终止一个线程的运行 -->
        

        <!-- 建议8.1.2 避免不加控制地创建新线程，而应该使用线程池来管控资源 -->
        

        <!-- 建议8.2.1 用括号明确表达式的操作顺序，避免过分依赖默认优先级-->
        

        <!-- 建议8.2.3 表达式的比较，应当遵循左侧倾向于变化、右侧倾向于不变的原则 -->
        

        <!-- 规则8.3.1 不要在控制性条件表达式中执行赋值 -->
        <module name="com.huawei.codecheck.customchecks.programming.NoAssignInControlConditionExpression">
            <!--<message key="MSG_KEY" value="不要在控制性条件表达式中执行赋值"/>-->
            <message key="MSG_KEY" value="Do not assign values in control flow statements."/>
        </module>

        <!-- G.CTL.01 不要在控制性条件表达式中执行赋值操作或执行复杂的条件判断 -->
        

        <!-- 规则8.3.2 不要在foreach循环里进行元素的 remove/add 操作,remove元素请使用Iterator -->
        <module name="com.huawei.codecheck.customchecks.programming.NoRemveAddItemInLoop">
            <message key="NoRemveAddItemInLoopCheck" value="Do not perform the remove or add operation on elements in a for-each loop. Use the removeIf method or Iterator to delete elements."/>
        </module>

        <!-- 建议8.3.1 对于if-else if（后续可能有多个else if）类型的条件判断，最后应该包含一个else分支。 -->
        

        <!--建议8.4.1 尽量不要实现Serializable接口-->
        

        <!-- 建议8.4.3 不应序列化直接指向系统资源的句柄 -->
        

        <!-- 建议8.5.1 尽量消除非受检的异常，不应该在整个类上使用SuppressWarnning-->
        

        <!-- 建议8.5.2 方法的设计可优先考虑泛型 -->
        

        <!-- 建议8.5.3 优先使用泛型集合，而不是数组 -->
        

        <!-- 建议8.5.4 声明一个泛型类通过限定符限制可用的泛型类型-->
        

        <!-- 建议8.6.2 Java 8使用Optional代替null作为返回值或者可能的缺失值 -->
        <!--G.MET.08 Java 8使用Optional代替null作为返回值或者可能的缺失值；禁止对Optional对象赋值为null-->
        

        <!--建议8.6.3 避免枚举常量序号的产生依赖于ordinal()方法 -->
        

        <!-- 规则8.7.1 使用集合的toArray()方法将集合转为数组 -->
        <!--G.PRM.01 将集合转为数组时使用Collection<T>.toArray(T[])方法且参数是类型相同零长度的数组; JDK 11后使用Collection<T>.toArray(IntFunction<T[]>)-->
        <module name="com.huawei.codecheck.customchecks.programming.ToArray">
            <!--<message key="ListToArray" value="将集合转为数组时使用Collection<T>.toArray(T[])方法且参数是类型相同零长度的数组; JDK 11后使用Collection<T>.toArray(IntFunction<T[]>"/>-->
            <message key="ListToArray" value="Use Collection.toArray(T[]) or Collection&lt;T&gt;.toArray(IntFunction&lt;T[]&gt;) to convert collections to arrays."/>
        </module>

        <!-- 规则8.7.2 避免创建不必要的对象 -->
        <module name="com.huawei.codecheck.customchecks.programming.UnnecessaryNew">
            <!--<message key="unnecessary.create" value="建议{0}不用建立新的对象" />-->
            <message key="unnecessary.create" value="Do not create unnecessary objects ''{0}''"/>
        </module>

        <!-- 规则8.7.4 执行IO操作时，应该在finally或者try-with-resource里关闭IO资源 -->
        <module name="com.huawei.codecheck.customchecks.programming.ResourceRelease">
            <!--<message key="resourceRelease" value="进行IO类操作时，应该在finally或者try-with-resource里关闭资源({0})"/>-->
            <message key="resourceRelease" value="Close resources(''{0}'') in the try-with-resource or finally statement when performing I/O operations."/>
        </module>

        <!-- 规则8.7.5 禁止使用主动GC -->
        <module name="com.huawei.codecheck.customchecks.programming.DetectGC">
            <!--<message key="DetectGC" value="禁止使用主动GC"/>-->
            <message key="DetectGC" value="Do not use active GC (unless in password and RMI),especially in frequent or periodically executed logic."/>
        </module>

        <!-- 规则8.8.1 不要在代码中硬编码"\n"和"\r"作为换行符号 -->
        <module name="com.huawei.codecheck.customchecks.programming.LineSeperator">
            <!--<message key="lineseperator.msg" value="不要在代码中硬编码\n和\r作为换行符号" />-->
            <message key="lineseperator.msg" value="Do not hard-code '\n' or '\r' in codes as line feed."/>
        </module>

        <!-- 规则8.9.1 在所有的输入输出环节，指明正确的编码方式，进行正确的字符到字节，或字节到字符的转换 -->
        <module name="com.huawei.codecheck.customchecks.programming.DefaultCharset">
            <message key="getBytesCheck" value="Did you mean ''{0}.getBytes(UTF-8)'' or ''{0}.getBytes(Charset.defaultCharset())''?"/>
            <message key="newStringCheck" value="Did you mean ''new String({0}, UTF-8)'' or ''new String({0}, Charset.defaultCharset())''?"/>
            <message key="URLEnDecodeCheck" value="Please set the charset parameter when you use {0}.{1}() method."/>
        </module>

        <!--规则8.9.3 字符串大小写转换、数字格式化为西方数字时，必须加上Locale.ROOT或Locale.ENGLISH -->
        <module name="com.huawei.codecheck.customchecks.programming.LocaleMatters">
            <!--<message key="MSG_KEY" value="字符串大小写转换、数字格式化为西方数字时，必须加上Locale.ROOT或Locale.ENGLISH"/>-->
            <message key="MSG_KEY" value="Use Locale.ROOT or Locale.ENGLISH for conversion between uppercase and lowercase of strings."/>
        </module>

        <!-- MO产品定制规则 -->
        

        <!-- V4.7版本规则2.4 -->
        

        <!-- 华为音乐安全规则1.1 -->
        
        
        <!-- 华为音乐安全规则1.2 -->
        

        <!-- 华为音乐安全规则1.3 -->
        
        
        <!-- 华为音乐安全规则1.4 -->
        
        
        <!-- 华为音乐安全规则1.5 -->
        
    </module>
</module>